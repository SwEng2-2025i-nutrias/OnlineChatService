from datetime import datetime
from typing import Optional, List, Dict, Any
from participant import Participant 

class Chat:
    def __init__(
        self,
        _id: Optional[str],
        type: str,
        participants: List[Participant],
        metadata: Optional[Dict[str, int]],
        title: Optional[str],
        created_at: datetime,
        last_message_at: Optional[datetime],
        unread_counts: Dict[str, int]
    ):
        self._id = _id
        self.type = type  # 'private' o 'group'
        self.participants = participants
        self.metadata = metadata
        self.title = title
        self.created_at = created_at
        self.last_message_at = last_message_at
        self.unread_counts = unread_counts

    @classmethod
    def create(cls, participants:list[Participant], type:str, created_at:datetime):
        return Chat(
            _id=None,  # ID will be generated by the repository
            type=type,
            participants=participants,
            metadata=None,
            title=None,
            created_at=created_at,
            last_message_at=None,
            unread_counts={participant["user_id"]: 0 for participant in participants}
        )
    
    # Method to get the id
    def get_id(self) -> Optional[str]:
        return self._id
    
    # Method to set the id
    def set_id(self, _id: str) -> None:
        self._id = _id
    
    # Method to obtain a chat from a dictionary
    @classmethod
    def from_dict(cls, data: Dict[str, Any]):
        _id:str = data["_id"]
        type:str = data["type"]
        participants: list[Participant] = [
            Participant(
                user_id=p["user_id"],
                role=p["role"],
                joined_at=datetime.fromisoformat(p["joined_at"])
            )
            for p in data["participants"]
        ]
        metadata: Optional[Dict[str, int]] = data.get("metadata")
        title: Optional[str] = data.get("title")
        created_at: datetime = datetime.fromisoformat(data["created_at"])
        last_message_at_raw = data.get("last_message_at")
        last_message_at: Optional[datetime] = (
            datetime.fromisoformat(last_message_at_raw) if last_message_at_raw else None
        )
        unread_counts: Dict[str, int] = data.get("unread_counts", {})

        return cls(
            _id=_id,
            type=type,
            participants=participants,
            metadata=metadata,
            title=title,
            created_at=created_at,
            last_message_at=last_message_at,
            unread_counts=unread_counts
        )
    
    def to_dict(self) -> Dict[str, Any]:
        return {
            "_id": self._id,
            "type": self.type,
            "participants": [
                {
                    "user_id": p["user_id"],
                    "role": p["role"],
                    "joined_at": p["joined_at"].isoformat()
                } for p in self.participants
            ],
            "metadata": self.metadata,
            "title": self.title,
            "created_at": self.created_at.isoformat(),
            "last_message_at": self.last_message_at.isoformat() if self.last_message_at else None,
            "unread_counts": self.unread_counts
        }